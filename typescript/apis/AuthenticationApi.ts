/* tslint:disable */
/* eslint-disable */
/**
 * Kulturfinder Bremen API
 * An ASP.NET Core Web API for managing the Data of Institutions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataportKulturfinderApiModelDataJwtTokenResponse,
  DataportKulturfinderApiModelDataUser,
  DataportKulturfinderApiModelDataUserNewPassword,
  MicrosoftAspNetCoreMvcProblemDetails,
} from '../models/index';
import {
    DataportKulturfinderApiModelDataJwtTokenResponseFromJSON,
    DataportKulturfinderApiModelDataJwtTokenResponseToJSON,
    DataportKulturfinderApiModelDataUserFromJSON,
    DataportKulturfinderApiModelDataUserToJSON,
    DataportKulturfinderApiModelDataUserNewPasswordFromJSON,
    DataportKulturfinderApiModelDataUserNewPasswordToJSON,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
} from '../models/index';

export interface AuthenticationAddUserPostRequest {
    dataportKulturfinderApiModelDataUser?: DataportKulturfinderApiModelDataUser;
}

export interface AuthenticationChangePasswordPostRequest {
    dataportKulturfinderApiModelDataUserNewPassword?: DataportKulturfinderApiModelDataUserNewPassword;
}

export interface AuthenticationLoginPostRequest {
    dataportKulturfinderApiModelDataUser?: DataportKulturfinderApiModelDataUser;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Adds a new User
     */
    async authenticationAddUserPostRaw(requestParameters: AuthenticationAddUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Authentication/AddUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataUserToJSON(requestParameters['dataportKulturfinderApiModelDataUser']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a new User
     */
    async authenticationAddUserPost(requestParameters: AuthenticationAddUserPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationAddUserPostRaw(requestParameters, initOverrides);
    }

    /**
     * Changes Password of a User
     */
    async authenticationChangePasswordPostRaw(requestParameters: AuthenticationChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Authentication/ChangePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataUserNewPasswordToJSON(requestParameters['dataportKulturfinderApiModelDataUserNewPassword']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Changes Password of a User
     */
    async authenticationChangePasswordPost(requestParameters: AuthenticationChangePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationChangePasswordPostRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a JWT Token to authorize
     */
    async authenticationLoginPostRaw(requestParameters: AuthenticationLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataportKulturfinderApiModelDataJwtTokenResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Authentication/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataUserToJSON(requestParameters['dataportKulturfinderApiModelDataUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataportKulturfinderApiModelDataJwtTokenResponseFromJSON(jsonValue));
    }

    /**
     * Gets a JWT Token to authorize
     */
    async authenticationLoginPost(requestParameters: AuthenticationLoginPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataportKulturfinderApiModelDataJwtTokenResponse> {
        const response = await this.authenticationLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
