/* tslint:disable */
/* eslint-disable */
/**
 * Kulturfinder Bremen API
 * An ASP.NET Core Web API for managing the Data of Institutions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataportKulturfinderApiModelDataReadBasicInstitute,
  DataportKulturfinderApiModelDataReadInstitute,
  DataportKulturfinderApiModelDataWriteInstituteMultiLingual,
  MicrosoftAspNetCoreMvcProblemDetails,
} from '../models/index';
import {
    DataportKulturfinderApiModelDataReadBasicInstituteFromJSON,
    DataportKulturfinderApiModelDataReadBasicInstituteToJSON,
    DataportKulturfinderApiModelDataReadInstituteFromJSON,
    DataportKulturfinderApiModelDataReadInstituteToJSON,
    DataportKulturfinderApiModelDataWriteInstituteMultiLingualFromJSON,
    DataportKulturfinderApiModelDataWriteInstituteMultiLingualToJSON,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
} from '../models/index';

export interface InstituteAddInstitutePostRequest {
    dataportKulturfinderApiModelDataWriteInstituteMultiLingual?: DataportKulturfinderApiModelDataWriteInstituteMultiLingual;
}

export interface InstituteDeleteInstituteIdDeleteRequest {
    id: number;
}

export interface InstituteGetInstituteIdAllDetailsGetRequest {
    id: number;
    language?: string;
}

export interface InstituteGetInstituteIdAllDetailsMultilingualGetRequest {
    id: number;
}

export interface InstituteGetInstitutesAllInstitutesBasicInformationGetRequest {
    language?: string;
}

export interface InstituteGetInstitutesVisibleInstitutesBasicInformationGetRequest {
    language?: string;
}

export interface InstituteUpdateInstitutePutRequest {
    dataportKulturfinderApiModelDataWriteInstituteMultiLingual?: DataportKulturfinderApiModelDataWriteInstituteMultiLingual;
}

/**
 * 
 */
export class InstituteApi extends runtime.BaseAPI {

    /**
     * Adds a new Institute
     */
    async instituteAddInstitutePostRaw(requestParameters: InstituteAddInstitutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Institute/AddInstitute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataWriteInstituteMultiLingualToJSON(requestParameters['dataportKulturfinderApiModelDataWriteInstituteMultiLingual']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a new Institute
     */
    async instituteAddInstitutePost(requestParameters: InstituteAddInstitutePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.instituteAddInstitutePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an Institute by the given id
     */
    async instituteDeleteInstituteIdDeleteRaw(requestParameters: InstituteDeleteInstituteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling instituteDeleteInstituteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Institute/DeleteInstitute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an Institute by the given id
     */
    async instituteDeleteInstituteIdDelete(requestParameters: InstituteDeleteInstituteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.instituteDeleteInstituteIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a specific Institute by a given Id with detailed Informations
     */
    async instituteGetInstituteIdAllDetailsGetRaw(requestParameters: InstituteGetInstituteIdAllDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataportKulturfinderApiModelDataReadInstitute>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling instituteGetInstituteIdAllDetailsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Institute/GetInstitute/{id}/AllDetails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataportKulturfinderApiModelDataReadInstituteFromJSON(jsonValue));
    }

    /**
     * Gets a specific Institute by a given Id with detailed Informations
     */
    async instituteGetInstituteIdAllDetailsGet(requestParameters: InstituteGetInstituteIdAllDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataportKulturfinderApiModelDataReadInstitute | null | undefined > {
        const response = await this.instituteGetInstituteIdAllDetailsGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets a specific Institute by a given Id with detailed Informations in all saved Languages
     */
    async instituteGetInstituteIdAllDetailsMultilingualGetRaw(requestParameters: InstituteGetInstituteIdAllDetailsMultilingualGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataportKulturfinderApiModelDataWriteInstituteMultiLingual>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling instituteGetInstituteIdAllDetailsMultilingualGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Institute/GetInstitute/{id}/AllDetails/Multilingual`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataportKulturfinderApiModelDataWriteInstituteMultiLingualFromJSON(jsonValue));
    }

    /**
     * Gets a specific Institute by a given Id with detailed Informations in all saved Languages
     */
    async instituteGetInstituteIdAllDetailsMultilingualGet(requestParameters: InstituteGetInstituteIdAllDetailsMultilingualGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataportKulturfinderApiModelDataWriteInstituteMultiLingual | null | undefined > {
        const response = await this.instituteGetInstituteIdAllDetailsMultilingualGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets a List of all Institutes with basic Informations
     */
    async instituteGetInstitutesAllInstitutesBasicInformationGetRaw(requestParameters: InstituteGetInstitutesAllInstitutesBasicInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataportKulturfinderApiModelDataReadInstitute>>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Institute/GetInstitutes/AllInstitutes/BasicInformation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataportKulturfinderApiModelDataReadInstituteFromJSON));
    }

    /**
     * Gets a List of all Institutes with basic Informations
     */
    async instituteGetInstitutesAllInstitutesBasicInformationGet(requestParameters: InstituteGetInstitutesAllInstitutesBasicInformationGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataportKulturfinderApiModelDataReadInstitute> | null | undefined > {
        const response = await this.instituteGetInstitutesAllInstitutesBasicInformationGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets a List of all Institutes with basic Informations
     */
    async instituteGetInstitutesVisibleInstitutesBasicInformationGetRaw(requestParameters: InstituteGetInstitutesVisibleInstitutesBasicInformationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataportKulturfinderApiModelDataReadBasicInstitute>>> {
        const queryParameters: any = {};

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Institute/GetInstitutes/VisibleInstitutes/BasicInformation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataportKulturfinderApiModelDataReadBasicInstituteFromJSON));
    }

    /**
     * Gets a List of all Institutes with basic Informations
     */
    async instituteGetInstitutesVisibleInstitutesBasicInformationGet(requestParameters: InstituteGetInstitutesVisibleInstitutesBasicInformationGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataportKulturfinderApiModelDataReadBasicInstitute> | null | undefined > {
        const response = await this.instituteGetInstitutesVisibleInstitutesBasicInformationGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Updates an Institute and overwrites all Informations by the given values
     */
    async instituteUpdateInstitutePutRaw(requestParameters: InstituteUpdateInstitutePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Institute/UpdateInstitute`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataWriteInstituteMultiLingualToJSON(requestParameters['dataportKulturfinderApiModelDataWriteInstituteMultiLingual']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an Institute and overwrites all Informations by the given values
     */
    async instituteUpdateInstitutePut(requestParameters: InstituteUpdateInstitutePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.instituteUpdateInstitutePutRaw(requestParameters, initOverrides);
    }

}
