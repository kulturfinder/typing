/* tslint:disable */
/* eslint-disable */
/**
 * Kulturfinder Bremen API
 * An ASP.NET Core Web API for managing the Data of Institutions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataportKulturfinderApiModelDataReadLivingImage,
  DataportKulturfinderApiModelDataWriteTranslation,
  DataportKulturfinderApiModelEnumsMediaType,
  MicrosoftAspNetCoreMvcProblemDetails,
} from '../models/index';
import {
    DataportKulturfinderApiModelDataReadLivingImageFromJSON,
    DataportKulturfinderApiModelDataReadLivingImageToJSON,
    DataportKulturfinderApiModelDataWriteTranslationFromJSON,
    DataportKulturfinderApiModelDataWriteTranslationToJSON,
    DataportKulturfinderApiModelEnumsMediaTypeFromJSON,
    DataportKulturfinderApiModelEnumsMediaTypeToJSON,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
} from '../models/index';

export interface MediaAddMediaToInstitutePostRequest {
    id?: number;
    instituteId?: number;
    alternateText?: Array<DataportKulturfinderApiModelDataWriteTranslation>;
    copyright?: string;
    artist?: string;
    order?: number;
    mediaType?: DataportKulturfinderApiModelEnumsMediaType;
    url?: string;
    livingImageId?: number;
    livingImageTitle?: string;
    livingImageWidth?: number;
    livingImageHeight?: number;
    livingImageScale?: number;
    livingImageOffsetX?: number;
    livingImageOffsetY?: number;
    livingImageOffsetZ?: number;
    livingImageFset?: Blob;
    livingImageFset3?: Blob;
    livingImageIset?: Blob;
    data?: Blob;
}

export interface MediaDeleteMediaDeleteRequest {
    id?: number;
}

export interface MediaGetLivingImageGetRequest {
    id?: number;
}

export interface MediaGetMediaGetRequest {
    id?: number;
    asThumbnail?: boolean;
    type?: string;
}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI {

    /**
     * Adds a new File to an existing Institute
     */
    async mediaAddMediaToInstitutePostRaw(requestParameters: MediaAddMediaToInstitutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['id'] != null) {
            formParams.append('Id', requestParameters['id'] as any);
        }

        if (requestParameters['instituteId'] != null) {
            formParams.append('InstituteId', requestParameters['instituteId'] as any);
        }

        if (requestParameters['alternateText'] != null) {
            requestParameters['alternateText'].forEach((element) => {
                formParams.append('AlternateText', element as any);
            })
        }

        if (requestParameters['copyright'] != null) {
            formParams.append('Copyright', requestParameters['copyright'] as any);
        }

        if (requestParameters['artist'] != null) {
            formParams.append('Artist', requestParameters['artist'] as any);
        }

        if (requestParameters['order'] != null) {
            formParams.append('Order', requestParameters['order'] as any);
        }

        if (requestParameters['mediaType'] != null) {
            formParams.append('MediaType', requestParameters['mediaType'] as any);
        }

        if (requestParameters['url'] != null) {
            formParams.append('Url', requestParameters['url'] as any);
        }

        if (requestParameters['livingImageId'] != null) {
            formParams.append('LivingImage.Id', requestParameters['livingImageId'] as any);
        }

        if (requestParameters['livingImageTitle'] != null) {
            formParams.append('LivingImage.Title', requestParameters['livingImageTitle'] as any);
        }

        if (requestParameters['livingImageWidth'] != null) {
            formParams.append('LivingImage.Width', requestParameters['livingImageWidth'] as any);
        }

        if (requestParameters['livingImageHeight'] != null) {
            formParams.append('LivingImage.Height', requestParameters['livingImageHeight'] as any);
        }

        if (requestParameters['livingImageScale'] != null) {
            formParams.append('LivingImage.Scale', requestParameters['livingImageScale'] as any);
        }

        if (requestParameters['livingImageOffsetX'] != null) {
            formParams.append('LivingImage.Offset.X', requestParameters['livingImageOffsetX'] as any);
        }

        if (requestParameters['livingImageOffsetY'] != null) {
            formParams.append('LivingImage.Offset.Y', requestParameters['livingImageOffsetY'] as any);
        }

        if (requestParameters['livingImageOffsetZ'] != null) {
            formParams.append('LivingImage.Offset.Z', requestParameters['livingImageOffsetZ'] as any);
        }

        if (requestParameters['livingImageFset'] != null) {
            formParams.append('LivingImage.Fset', requestParameters['livingImageFset'] as any);
        }

        if (requestParameters['livingImageFset3'] != null) {
            formParams.append('LivingImage.Fset3', requestParameters['livingImageFset3'] as any);
        }

        if (requestParameters['livingImageIset'] != null) {
            formParams.append('LivingImage.Iset', requestParameters['livingImageIset'] as any);
        }

        if (requestParameters['data'] != null) {
            formParams.append('Data', requestParameters['data'] as any);
        }

        const response = await this.request({
            path: `/Media/AddMediaToInstitute`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Adds a new File to an existing Institute
     */
    async mediaAddMediaToInstitutePost(requestParameters: MediaAddMediaToInstitutePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.mediaAddMediaToInstitutePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a File
     */
    async mediaDeleteMediaDeleteRaw(requestParameters: MediaDeleteMediaDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Media/DeleteMedia`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a File
     */
    async mediaDeleteMediaDelete(requestParameters: MediaDeleteMediaDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaDeleteMediaDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a LivinImage by Id
     */
    async mediaGetLivingImageGetRaw(requestParameters: MediaGetLivingImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DataportKulturfinderApiModelDataReadLivingImage>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Media/GetLivingImage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DataportKulturfinderApiModelDataReadLivingImageFromJSON(jsonValue));
    }

    /**
     * Gets a LivinImage by Id
     */
    async mediaGetLivingImageGet(requestParameters: MediaGetLivingImageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DataportKulturfinderApiModelDataReadLivingImage | null | undefined > {
        const response = await this.mediaGetLivingImageGetRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets a File
     */
    async mediaGetMediaGetRaw(requestParameters: MediaGetMediaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['asThumbnail'] != null) {
            queryParameters['asThumbnail'] = requestParameters['asThumbnail'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Media/GetMedia`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets a File
     */
    async mediaGetMediaGet(requestParameters: MediaGetMediaGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mediaGetMediaGetRaw(requestParameters, initOverrides);
    }

}
