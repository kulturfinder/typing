/* tslint:disable */
/* eslint-disable */
/**
 * Kulturfinder Bremen API
 * An ASP.NET Core Web API for managing the Data of Institutions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DataportKulturfinderApiModelDataWriteCategoryMultiLingual,
  MicrosoftAspNetCoreMvcProblemDetails,
} from '../models/index';
import {
    DataportKulturfinderApiModelDataWriteCategoryMultiLingualFromJSON,
    DataportKulturfinderApiModelDataWriteCategoryMultiLingualToJSON,
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
} from '../models/index';

export interface CategoryDeleteCategoryIdDeleteRequest {
    id: number;
}

export interface CategoryUpdateCategoryPutRequest {
    dataportKulturfinderApiModelDataWriteCategoryMultiLingual?: DataportKulturfinderApiModelDataWriteCategoryMultiLingual;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     * Deletes a Tag by the given id
     */
    async categoryDeleteCategoryIdDeleteRaw(requestParameters: CategoryDeleteCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling categoryDeleteCategoryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Category/DeleteCategory/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Tag by the given id
     */
    async categoryDeleteCategoryIdDelete(requestParameters: CategoryDeleteCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.categoryDeleteCategoryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a List of all Categories
     */
    async categoryGetCategoriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DataportKulturfinderApiModelDataWriteCategoryMultiLingual>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Category/GetCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DataportKulturfinderApiModelDataWriteCategoryMultiLingualFromJSON));
    }

    /**
     * Gets a List of all Categories
     */
    async categoryGetCategoriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DataportKulturfinderApiModelDataWriteCategoryMultiLingual> | null | undefined > {
        const response = await this.categoryGetCategoriesGetRaw(initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Updates a Category and overwrites all information by the given values
     */
    async categoryUpdateCategoryPutRaw(requestParameters: CategoryUpdateCategoryPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Category/UpdateCategory`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DataportKulturfinderApiModelDataWriteCategoryMultiLingualToJSON(requestParameters['dataportKulturfinderApiModelDataWriteCategoryMultiLingual']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a Category and overwrites all information by the given values
     */
    async categoryUpdateCategoryPut(requestParameters: CategoryUpdateCategoryPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.categoryUpdateCategoryPutRaw(requestParameters, initOverrides);
    }

}
