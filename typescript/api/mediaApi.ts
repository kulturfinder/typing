/**
 * Kulturfinder Bremen API
 * An ASP.NET Core Web API for managing the Data of Institutions
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { DataportKulturfinderApiModelDataReadLivingImage } from '../model/dataportKulturfinderApiModelDataReadLivingImage';
import { DataportKulturfinderApiModelDataWriteTranslation } from '../model/dataportKulturfinderApiModelDataWriteTranslation';
import { DataportKulturfinderApiModelEnumsMediaType } from '../model/dataportKulturfinderApiModelEnumsMediaType';
import { MicrosoftAspNetCoreMvcProblemDetails } from '../model/microsoftAspNetCoreMvcProblemDetails';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://kulturfindertest.dsecurecloud.de/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum MediaApiApiKeys {
}

export class MediaApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Bearer': new HttpBearerAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: MediaApiApiKeys, value: string) {
        (this.authentications as any)[MediaApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.Bearer.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Adds a new File to an existing Institute
     * @param id 
     * @param instituteId 
     * @param alternateText 
     * @param copyright 
     * @param artist 
     * @param order 
     * @param mediaType 
     * @param url 
     * @param livingImageId 
     * @param livingImageTitle 
     * @param livingImageWidth 
     * @param livingImageHeight 
     * @param livingImageScale 
     * @param livingImageOffsetX 
     * @param livingImageOffsetY 
     * @param livingImageOffsetZ 
     * @param livingImageFset 
     * @param livingImageFset3 
     * @param livingImageIset 
     * @param data 
     */
    public async mediaAddMediaToInstitutePost (id?: number, instituteId?: number, alternateText?: Array<DataportKulturfinderApiModelDataWriteTranslation>, copyright?: string, artist?: string, order?: number, mediaType?: DataportKulturfinderApiModelEnumsMediaType, url?: string, livingImageId?: number, livingImageTitle?: string, livingImageWidth?: number, livingImageHeight?: number, livingImageScale?: number, livingImageOffsetX?: number, livingImageOffsetY?: number, livingImageOffsetZ?: number, livingImageFset?: RequestFile, livingImageFset3?: RequestFile, livingImageIset?: RequestFile, data?: RequestFile, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: number;  }> {
        const localVarPath = this.basePath + '/Media/AddMediaToInstitute';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (id !== undefined) {
            localVarFormParams['Id'] = ObjectSerializer.serialize(id, "number");
        }

        if (instituteId !== undefined) {
            localVarFormParams['InstituteId'] = ObjectSerializer.serialize(instituteId, "number");
        }

        if (alternateText !== undefined) {
            localVarFormParams['AlternateText'] = ObjectSerializer.serialize(alternateText, "Array<DataportKulturfinderApiModelDataWriteTranslation>");
        }

        if (copyright !== undefined) {
            localVarFormParams['Copyright'] = ObjectSerializer.serialize(copyright, "string");
        }

        if (artist !== undefined) {
            localVarFormParams['Artist'] = ObjectSerializer.serialize(artist, "string");
        }

        if (order !== undefined) {
            localVarFormParams['Order'] = ObjectSerializer.serialize(order, "number");
        }

        if (mediaType !== undefined) {
            localVarFormParams['MediaType'] = ObjectSerializer.serialize(mediaType, "DataportKulturfinderApiModelEnumsMediaType");
        }

        if (url !== undefined) {
            localVarFormParams['Url'] = ObjectSerializer.serialize(url, "string");
        }

        if (livingImageId !== undefined) {
            localVarFormParams['LivingImage.Id'] = ObjectSerializer.serialize(livingImageId, "number");
        }

        if (livingImageTitle !== undefined) {
            localVarFormParams['LivingImage.Title'] = ObjectSerializer.serialize(livingImageTitle, "string");
        }

        if (livingImageWidth !== undefined) {
            localVarFormParams['LivingImage.Width'] = ObjectSerializer.serialize(livingImageWidth, "number");
        }

        if (livingImageHeight !== undefined) {
            localVarFormParams['LivingImage.Height'] = ObjectSerializer.serialize(livingImageHeight, "number");
        }

        if (livingImageScale !== undefined) {
            localVarFormParams['LivingImage.Scale'] = ObjectSerializer.serialize(livingImageScale, "number");
        }

        if (livingImageOffsetX !== undefined) {
            localVarFormParams['LivingImage.Offset.X'] = ObjectSerializer.serialize(livingImageOffsetX, "number");
        }

        if (livingImageOffsetY !== undefined) {
            localVarFormParams['LivingImage.Offset.Y'] = ObjectSerializer.serialize(livingImageOffsetY, "number");
        }

        if (livingImageOffsetZ !== undefined) {
            localVarFormParams['LivingImage.Offset.Z'] = ObjectSerializer.serialize(livingImageOffsetZ, "number");
        }

        if (livingImageFset !== undefined) {
            localVarFormParams['LivingImage.Fset'] = livingImageFset;
        }
        localVarUseFormData = true;

        if (livingImageFset3 !== undefined) {
            localVarFormParams['LivingImage.Fset3'] = livingImageFset3;
        }
        localVarUseFormData = true;

        if (livingImageIset !== undefined) {
            localVarFormParams['LivingImage.Iset'] = livingImageIset;
        }
        localVarUseFormData = true;

        if (data !== undefined) {
            localVarFormParams['Data'] = data;
        }
        localVarUseFormData = true;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.Bearer.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.Bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: number;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "number");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Deletes a File
     * @param id 
     */
    public async mediaDeleteMediaDelete (id?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/Media/DeleteMedia';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.Bearer.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.Bearer.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Gets a LivinImage by Id
     * @param id 
     */
    public async mediaGetLivingImageGet (id?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DataportKulturfinderApiModelDataReadLivingImage;  }> {
        const localVarPath = this.basePath + '/Media/GetLivingImage';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DataportKulturfinderApiModelDataReadLivingImage;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DataportKulturfinderApiModelDataReadLivingImage");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Gets a File
     * @param id 
     * @param asThumbnail 
     * @param type 
     */
    public async mediaGetMediaGet (id?: number, asThumbnail?: boolean, type?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/Media/GetMedia';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (id !== undefined) {
            localVarQueryParameters['id'] = ObjectSerializer.serialize(id, "number");
        }

        if (asThumbnail !== undefined) {
            localVarQueryParameters['asThumbnail'] = ObjectSerializer.serialize(asThumbnail, "boolean");
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
